1. Familiarise yourself with the HTML and JS
    -some of the HTML elements:
        -classes: message-box, table, player, player-name, points, hand
        -images, labels
        -buttons (styled in a flexbox)
    -JS elements:
        - .window.addEventListener('DOMContentLoaded', function () {
            //Execute after page load 
        })
            -working with the BOM and the DOM
            -attaching an event handler to the specified element
            -DOMContentLoaded event fires when the initial HTML document has been completely 
            loaded and parsed, without waiting for stylesheets, images, and subframes to 
            finish loading 
2. Style the page
    -style the page to make it look like a card table
        -don't spend too much time on this!
    -there's also an example stylesheet in the extras folder; you can link that in your HTML file 
3. Cards on the table
    -"hard-code" the cards first, then write JS to add the right card later
        -"hard coding" means to put something into your source code; embedding output or 
        configuration data directly into the source code of a program 
    -first, add the HTML for an img tag inside of the #dealer-hand or #player-hand element  
        -link (src attribute) card images to these elements
4. Dealing the cards    
    -once you have an idea of how you want the HTML to look, you can remove the cards from step 3
    -now you can generate them dynamically with JS
    -when the "Deal" button is clicked, deal 4 times
        -player
        -dealer
        -player
        -dealer
        -the event is the click; once the click happens, you want to deal 4 times 
    -you will need to attach an event listener to the button
        -addEventListener("click", myFunction);
    -create a new img element
        -use the img tag
    -append the new img to the #dealer-hand and #player-hand elements 
        -can use innerHTML to modify the content of an HTML element 
        - document.getElementById(id).attribute = new value 
            -this will change the value of the HTML attribute
        -you can also use the push() method to an array (at the end)
        -you can just use the same card
5. Hit me
    -when the "Hit" button is clicked, deal one more card to the player (use the same card image),
    and then another to the dealer
        -the event is the click
        *is there any code here that is repeated? is there a way to write a function to deal from
        the card to whichever player we chose?
6. Creating a Deck
    -create a deck of cards 
        -our deck can be an array of objects
            -each one of the objects in the deck will represent a card
            -each card will have a rank and a suit 
            -ex. Queen of Hearts: { rank: 12, suit: 'hearts' }
        -we don't have to manually code a whole deck of cards; we can write a function to generate a deck of 52 cards
            -create a buildDeck function- this will return a new array with 52 card objects
                -there are 4 suits; for each suit, there is a rank from 1-13
7. Deal the Deck
    -now that you have a deck, you want to use it
    -need to make something to represent the player and dealer hands
        -make two arrays
            -dealerHand
            -playerHand
        -you'll use these arrays later to calculate the total points for the hand
    -adjust the code so that when we click the "Deal" button, it will remove a card from the deck, 
    then place that card into the playerHand array
        -need to add an event listener that waits fot the "Deal" button to be clicked 
        *is there an array method that allows us to remove and return an item from an array?
            *pop will remove elements from an array
            *push will add new elements to an array
            *splice method can be used to add new items to an array
            *the card that's pulled from the deck needs to be random 
                -you can sort the array in a random order and then pull a card from there
                    -you can use the Fisher Yates Method for the randomizing 
        -gameplay should still deal the same as before: 1 card each to player, dealer, player, dealer
8. Image from Cards
    -in order to put a card visually on the page, you need to insert an _ tag
    -before, you were displaying images using the hard-coded URL for a specific card
    -now, you want to use the card objects to set the src attribute based on the card object
        -write a getCardImage function; this will take a card object and return an img element that
        has the right img URL for that card
9. Render Hands
    -now that we can create an image based on a card object, we need to display the player hand and the 
    dealer hand on the page 
        -write a render function
            -this will loop over the dealerHand and playerHand arrays and append a new card img to the 
            appropriate elements for each card in the hands 
                *for loop to loop over the hand arrays
                *add condition to stop when you reach a certain card
                *push() method and index the card's location in the array/deck to append a new img to the
                respective element for each card in the hands 
            -may want to add the ability to display the current points for the dealer and the player
10. Shuffle the Deck
    -write a function to shuffle the deck; here are some strategies:
        -for a fixed number of times, randomly choose 2 cards within the deck and swap them
        -make a new array, randomly choose one card after another from the original array and push it 
        to the new array
        -search on StackOverflow for a solution to "shuffle a JS array"
    -use the shuffle function to shuffle the deck when you hit the deal button, but before you deal the cards   
        -need to add an event listener that waits for the click of the deal button  
        -then, use the deal function again
<<<<<<< HEAD
11. Calculate Points for a Hand
=======
11. Calulate Points for a Hand
>>>>>>> main
    -write a calculatePoints function       
        -this function will take in an array of card objects and return the points for that hand 
            -will also need to assign point values to the cards (rank does not equal point value)
            -function may need to summate the cards in each hand 
12. Display Points  
    -after dealing any card, display the current points for the dealer and the player
13. Busts
    -check for busts after each card is dealt
        -a bust is when either the dealer or the player's hand go over 21 points; when you bust, you lose
            -maybe add a for loop and an if condition
        -if there is a bust, display a message on the page saying that they busted
            -add an alert
            -there is a div with an id of messages already on the page
14. Player Pass
    -when the "Stand" button is clicked, the player doesn't want any more cards 
    -deal cards to the dealer until they reach 17 points or more    
        -for loop; break the loop when the dealerHand is 17 >=  points 
15. Determine Winner 
    -when the dealer's turn is over, whoever has the most points wins
    -determine the winner 
    -display a message to show who won
    -you may also want to disable the "Deal", "Hit", and "Pass" buttons at this point 
16. Restart the Game
    -what is involved in resetting the game?
    -is there any resuable code?
    -is there a way to reset the dealer and player hands?        
    -is there a way to reset the buttons?
    -do the buttons need to be re-enabled?
    -do the messages need to be re-enabled?